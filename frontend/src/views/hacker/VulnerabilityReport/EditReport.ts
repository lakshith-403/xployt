import { VulnerabilityReportFormView } from './VulnerabilityReportForm';
import {Quark} from "@ui_lib/quark";
import {ViewHandler} from "@ui_lib/view";
import {Button, ButtonType} from "@components/button/base";
import {VulnerabilityReport} from "@data/common/cache/vulnerabilityReport.cache";

export class EditReportView extends VulnerabilityReportFormView {
    private readonly reportId: string;

    constructor(params: { projectId: string; reportId: string }) {
        super(params);
        this.reportId = params.reportId;
    }

    private async loadReportData(): Promise<void> {
        const report = await this.vulnerabilityReportCache.load();
        if (report) {
            this.formObject = {
                vulnerabilityType: report.vulnerabilityType,
                severity: report.severity,
                reportTitle: report.title,
                description: report.description,
                steps: report.steps.map((step) => ({
                    description: step.description,
                    attachments: step.attachments.map((attachment) => attachment.name),
                })),
                agreement: true // assuming it's true if report exists
            };
        }
    }

    protected async handleSubmit(): Promise<void> {
        const report: VulnerabilityReport = await this.prepareReportData();
        const selectedFiles = this.files.flat();

        try {
            const submittedReport = await this.vulnerabilityReportCache.updateReport(this.reportId, report, selectedFiles);
            console.log('Report submitted successfully:', submittedReport);
        } catch (error) {
            console.error('Error submitting report:', error);
        }
    }

    async render(q: Quark): Promise<void> {
        await this.loadReportData();
        await super.render(q);

        this.submitButton = new Button({
            label: 'Update Report',
            type: ButtonType.PRIMARY,
            onClick: async (e: Event) => {
                e.preventDefault();
                await this.handleSubmit();
            }
        });
    }
}


export const editReportViewHandler = new ViewHandler(
    '/edit-report/{projectId}/{reportId}',
    EditReportView
);