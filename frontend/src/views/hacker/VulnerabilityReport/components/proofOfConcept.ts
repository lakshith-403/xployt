import { Quark, QuarkFunction as $ } from '@ui_lib/quark';
import { StepComponent } from './stepComponent';
import {ButtonType} from "@components/button/base";
import {IconButton} from "@components/button/icon.button";

export class ProofOfConceptSection {
    private formObject: {
        vulnerabilityType: string;
        severity: string;
        reportTitle: string;
        description: string;
        steps: {
            description: string;
            attachments: string;
        }[];
        agreement: boolean;
    };
    private stepCount: number;

    constructor(formObject: typeof ProofOfConceptSection.prototype.formObject, initialStepCount: number = 2) {
        this.formObject = formObject;
        this.stepCount = initialStepCount;
    }

    private addStep(container: Quark): void {
        this.stepCount++;
        this.renderStep(container, this.stepCount);
    }

    private renderStep(container: Quark, i: number): void {
        this.formObject.steps.push({
            description: '',
            attachments: ''
        });
        new StepComponent(this.formObject, i).render(container);
    }

    render(q: Quark): void {
        $(q, 'div', 'form-section section-divider', {id: 'proofOfConcept'}, (q) => {
            $(q, 'h2', 'section-subtitle', {}, (q) => {
                q.innerHTML = 'Proof of Concept';
            });
            const stepsContainer = $(q, 'div', 'step-container', {}, (q) => {

                for (let i = 1; i <= this.stepCount; i++) {
                    this.renderStep(q, i);
                }
            });

            new IconButton({
                icon: 'fa fa-plus',
                label: 'Add Step',
                type: ButtonType.SECONDARY,
                onClick: (event: Event) => {
                    event.preventDefault()
                    this.addStep(stepsContainer)
                }
            }).render(q)
        })
    }
}
