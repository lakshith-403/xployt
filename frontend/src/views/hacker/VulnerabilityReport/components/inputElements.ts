import {Quark, QuarkFunction as $} from "@ui_lib/quark";
import {handleInputChange, validation} from "@views/hacker/VulnerabilityReport/VulnerabilityReportForm";

export class VulnerabilityTypeElement {
    private formObject: { vulnerabilityType: string, severity: string };
    private validation: validation;
    private vulnerabilityTypes: string[] = [];
    private severityLevels: Array<string[]>;
    private severityElement!: HTMLElement;

    constructor(formObject: { vulnerabilityType: string, severity: string }, severityLevels: Array<string[]>) {
        this.formObject = formObject;
        this.validation = {result: true, message: ''};
        this.severityLevels = severityLevels;
        this.vulnerabilityTypes = severityLevels.map((level => level[0]));
    }

    private renderSeverityLevel(severityLevel: string): void {
        this.severityElement.innerHTML = ''; // Clear the content
        $(this.severityElement, 'label', 'label', {for: 'severity'}, "Severity");
        $(this.severityElement, 'span', `${severityLevel} severity`, {}, severityLevel);
    }

    public getSeverityForVulnerabilityType(vulnerabilityType: string): string {
        console.log('Fetching severity for vulnerability type:', vulnerabilityType);
        const match = this.severityLevels.find(level => level[0] === vulnerabilityType);
        console.log('Matched severity level:', match);
        return match ? match[1] : '';
    }

    render(q: Quark): void {
        $(q, 'div', 'row', {}, (container) => {
            $(container, 'span', 'form-element flex-1', {}, (q) => {
                $(q, 'label', 'label', {for: 'vulnerability-type'}, (q) => {
                    q.innerHTML = 'Vulnerability Type';
                });
                $(q, 'select', `${!this.validation && 'error'} input`, {
                    id: 'vulnerability-type',
                    value: this.formObject.vulnerabilityType
                }, (q) => {
                    $(q, 'option', '', {value: ''}, 'Select Vulnerability Type');
                    this.vulnerabilityTypes.forEach((type: string) => {
                        $(q, 'option', '', {value: type}, type);
                    });
                    q.addEventListener('input', (e) => {
                        const severity = this.getSeverityForVulnerabilityType((e.target as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement).value);
                        this.renderSeverityLevel(severity.toUpperCase());
                        this.formObject.severity = severity;
                        handleInputChange(e, this.formObject, 'vulnerabilityType', 'string', q.parentElement!);
                    });
                });
            });
            this.severityElement = $(container, 'span', 'form-element flex-1', {}, (q) => {
            });
            this.renderSeverityLevel('PENDING')
        });
    }
}

export class ReportTitleElement {
    private formObject: { reportTitle: string };
    private validation: validation;

    constructor(formObject: { reportTitle: string }) {
        this.formObject = formObject;
        this.validation = {result: true, message: ''};
    }

    render(q: Quark): void {
        $(q, 'span', 'form-element align-center', {}, (q) => {
            $(q, 'label', 'label', {for: 'title'}, (q) => {
                q.innerHTML = 'Report Title';
            });
            $(q, 'input', `input`, {id: 'title', value: this.formObject.reportTitle}, (q) => {
                q.innerHTML = this.formObject.reportTitle;
                q.addEventListener('blur', (e) => {
                    handleInputChange(e, this.formObject, 'reportTitle', 'string', q.parentElement!);
                });
            });
        });
    }
}

export class DescriptionElement {
    private formObject: { description: string };
    private validation: validation;

    constructor(formObject: { description: string }) {
        this.formObject = formObject;
        this.validation = {result: true, message: ''};
    }

    render(parent: Quark): void {
        $(parent, 'span', 'form-element', {}, (q) => {
            $(q, 'label', 'label', {for: "report-description"}, (q) => {
                q.innerHTML = 'Description';
            });
            $(q, 'div', '', {}, (input) => {
                $(input, 'textarea', `input description`, {
                    id: "report-description",
                    value: this.formObject.description
                }, (q) => {
                    q.innerHTML = this.formObject.description;
                    q.addEventListener('blur', (e) => {
                        handleInputChange(e, this.formObject, 'description', 'string', q.parentElement!);
                    });
                });

            });

        });

    }
}