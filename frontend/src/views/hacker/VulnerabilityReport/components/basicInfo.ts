import {Quark, QuarkFunction as $} from '@ui_lib/quark';
import {validateField} from '@/components/multistepForm/validationUtils';

class VulnerabilityTypeElement {
    private formObject: { vulnerabilityType: string };

    constructor(formObject: { vulnerabilityType: string }) {
        this.formObject = formObject;
    }

    render(q: Quark): void {
        $(q, 'span', 'form-element flex-1', {}, (q) => {
            $(q, 'label', 'label', {for: 'vulnerability-type'}, (q) => {
                q.innerHTML = 'Vulnerability Type';
            });
            $(q, 'select', 'input', {id: 'vulnerability-type'}, (q) => {
                $(q, 'option', '', {value: 'XSS'}, 'XSS');
                $(q, 'option', '', {value: 'CSRF'}, 'CSRF');
                $(q, 'option', '', {value: 'SQLi'}, 'SQLi');
                q.addEventListener('change', (e) => {
                    const value = (e.target as HTMLSelectElement).value;
                    const validation = validateField('vulnerabilityType', value, 'string');
                    if (validation.result) {
                        this.formObject.vulnerabilityType = value;
                    } else {
                        alert(validation.message);
                    }
                });
            });
        });
    }
}

class SeverityElement {
    private formObject: { severity: string };

    constructor(formObject: { severity: string }) {
        this.formObject = formObject;
    }

    render(q: Quark): void {
        $(q, 'span', 'form-element flex-1', {}, (q) => {
            $(q, 'label', 'label', {for: 'severity'}, "Severity");
            $(q, 'select', 'input', {id: "severity"}, (q) => {
                $(q, 'option', '', {value: 'Low'}, "Low");
                $(q, 'option', '', {value: 'Medium'}, "Medium");
                $(q, 'option', '', {value: 'High'}, "High");
                q.addEventListener('change', (e) => {
                    const value = (e.target as HTMLSelectElement).value;
                    const validation = validateField('severity', value, 'string');
                    if (validation.result) {
                        this.formObject.severity = value;
                    } else {
                        alert(validation.message);
                    }
                });
            });
        });
    }
}

class ReportTitleElement {
    private formObject: { reportTitle: string };

    constructor(formObject: { reportTitle: string }) {
        this.formObject = formObject;
    }

    render(q: Quark): void {
        $(q, 'span', 'form-element align-center', {}, (q) => {
            $(q, 'label', 'label', {for: 'title'}, (q) => {
                q.innerHTML = 'Report Title';
            });
            $(q, 'input', 'input', {id: 'title'}, (q) => {
                q.addEventListener('input', (e) => {
                    const value = (e.target as HTMLInputElement).value;
                    const validation = validateField('reportTitle', value, 'string');
                    if (validation.result) {
                        this.formObject.reportTitle = value;
                    } else {
                        alert(validation.message);
                    }
                });
            });
        });
    }
}

class DescriptionElement {
    private formObject: { description: string };

    constructor(formObject: { description: string }) {
        this.formObject = formObject;
    }

    render(q: Quark): void {
        $(q, 'span', 'form-element', {}, (q) => {
            $(q, 'label', 'label', {for: "report-description"}, (q) => {
                q.innerHTML = 'Description';
            });
            $(q, 'textarea', 'input description', {id: "report-description"}, (q) => {
                q.addEventListener('input', (e) => {
                    const value = (e.target as HTMLTextAreaElement).value;
                    const validation = validateField('description', value, 'string');
                    if (validation.result) {
                        this.formObject.description = value;
                    } else {
                        alert(validation.message);
                    }
                });
            });
        });
    }
}

export class BasicInfoSection {
    private formObject: {
        vulnerabilityType: string;
        severity: string;
        reportTitle: string;
        description: string;
        steps: {
            description: string;
            attachments: string;
        }[];
        agreement: boolean;
    };

    constructor(formObject: typeof BasicInfoSection.prototype.formObject) {
        this.formObject = formObject;
    }

    render(q: Quark): void {
        $(q, 'div', 'form-section section-divider', {id: 'basicInfo'}, (q) => {
            $(q, 'div', 'row', {}, (q) => {
                new VulnerabilityTypeElement(this.formObject).render(q);
                new SeverityElement(this.formObject).render(q);
            });
            $(q, 'div', 'row', {}, (q) => {
                new ReportTitleElement(this.formObject).render(q);
            });
            $(q, 'div', 'row', {}, (q) => {
                new DescriptionElement(this.formObject).render(q);
            });
        });
    }
}