import {CacheObject, DataFailure} from "@data/cacheBase";
import {VulnerabilityReportEndpoints} from "@data/common/network/vulnerabilityReport.network";

export interface ReportAttachment{
    id: string,
    name: string,
    url: string,
}

export interface ReportSteps{
    stepNumber: string,
    description: string,
    attachments: ReportAttachment[],
}

export interface VulnerabilityReport {
    reportId?: string,
    projectId: string,
    hackerId: string,
    severity: string,
    vulnerabilityType: string,
    title: string,
    description: string,
    steps: ReportSteps[],
    // testDate: String,
    createdAt: string,
}

export class VulnerabilityReportCache extends CacheObject<VulnerabilityReport>{
    private reportId: string;

    constructor(reportId: string) {
        super();
        this.reportId = reportId;
    }

    async load(): Promise<VulnerabilityReport> {
        const response = await VulnerabilityReportEndpoints.getReportById(this.reportId);

        if(!response.is_successful) throw new DataFailure('load report', response.error ?? '');

        return response.data as VulnerabilityReport;
    }

    async createReport(arg: VulnerabilityReport, attachments: File[]): Promise<VulnerabilityReport> {
        const response = await VulnerabilityReportEndpoints.createReport(arg, attachments)

        if(!response.is_successful) throw new DataFailure('create report', response.error ?? '');

        return response.data as VulnerabilityReport
    }
}