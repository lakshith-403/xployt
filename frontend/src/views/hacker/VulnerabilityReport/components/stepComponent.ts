// StepComponent.ts
import { Quark, QuarkFunction as $ } from '@ui_lib/quark';
import { Button, ButtonType } from "@components/button/base";

export class StepComponent {
    private formObject: {
        vulnerabilityType: string,
        severity: string,
        reportTitle: string,
        description: string,
        steps: {
            description: string,
            attachments: string
        }[]
        agreement: boolean,
    };
    private stepNumber: number;

    constructor(formObject: {
        vulnerabilityType: string,
        severity: string,
        reportTitle: string,
        description: string,
        steps: {
            description: string,
            attachments: string
        }[]
        agreement: boolean,
    }, stepNumber: number) {
        this.formObject = formObject;
        this.stepNumber = stepNumber;
    }

    private handleFileUpload(fileInput: HTMLInputElement, placeholderElement: HTMLElement): void {
        const file = fileInput.files?.[0];
        if (file) {
            this.formObject.steps[this.stepNumber - 1].attachments = file.name;
            placeholderElement.innerHTML = file.name;
            placeholderElement.classList.remove('placeholder');
        }
    }

    render(q: Quark): void {
        $(q, 'div', 'step', {}, (q) => {
            $(q, 'span', 'step-number', {}, (q) => {
                q.innerHTML = `Step ${String(this.stepNumber).padStart(2, '0')}`;
            });
            $(q, 'div', 'step-content', {}, (q) => {
                $(q, 'span', 'form-element align-top', {}, (q) => {
                    $(q, 'label', 'label', {}, "Description");
                    $(q, 'textarea', 'input description', {}, (q) => {
                        q.addEventListener('input', (e) => {
                            this.formObject.steps[this.stepNumber - 1].description = (e.target as HTMLTextAreaElement).value;
                        });
                    });
                });
                $(q, 'span', 'form-element align-center', {}, (q) => {
                    $(q, 'label', 'label', {}, "Attachments");
                    const fileInput = $(q, 'input', '', { type: 'file' }, (q) => {
                        q.addEventListener('change', (e) => {
                            this.handleFileUpload(q as HTMLInputElement, fileInputLabel);
                        });
                    });
                    const fileInputLabel = $(q, 'span', 'input placeholder', {}, (q) => {
                        q.innerHTML = 'No file Chosen';
                    });
                    new Button({
                        label: "Choose File",
                        type: ButtonType.PRIMARY,
                        onClick: () => fileInput.click()
                    }).render(q);
                });
            });
        });
    }
}
