import {Quark, QuarkFunction as $} from '@ui_lib/quark';
import {Button, ButtonType} from "@components/button/base";
import {
    FieldErrorMessage,
    formObject,
    handleInputChange
} from "@views/hacker/VulnerabilityReport/VulnerabilityReportForm";
import {isValidFileType, validateField} from '@/components/multistepForm/validationUtils';

export class StepComponent {
    private formObject: formObject;
    private stepNumber: number;

    constructor(formObject: formObject, stepNumber: number) {
        this.formObject = formObject;
        this.stepNumber = stepNumber;
    }

    private handleFileUpload(fileInput: HTMLInputElement, placeholderElement: HTMLElement, parent: HTMLElement): void {
        const file = fileInput.files?.[0];
        if (file) {
            const validation = validateField('file', file.name, 'file');
            if (validation.result) {
                this.formObject.steps[this.stepNumber - 1].attachments = file.name;
                const error = parent.querySelector('.error-message');
                if (error) {
                    error.remove();
                }
                placeholderElement.innerHTML = file.name;
                placeholderElement.classList.remove('placeholder', 'error');
            } else {
                new FieldErrorMessage(validation.message).render(parent)
                if (!parent.querySelector('.error-message')) {
                    new FieldErrorMessage(validation.message).render(parent);
                }
            }
        }
    }

    render(q: Quark): void {
        $(q, 'div', 'step', {}, (q) => {
            $(q, 'span', 'step-number', {}, (q) => {
                q.innerHTML = `Step ${String(this.stepNumber).padStart(2, '0')}`;
            });
            $(q, 'div', 'step-content', {}, (q) => {
                $(q, 'span', 'form-element align-top', {}, (q) => {
                    $(q, 'label', 'label', {}, "Description");
                    $(q, 'div', '', {}, (input) => {
                        $(input, 'textarea', 'input description', {}, (q) => {
                            q.addEventListener('blur', (e) => {
                                handleInputChange(e, this.formObject.steps[this.stepNumber - 1], 'description', 'string', q.parentElement!);
                            });
                        });
                    })
                });
                $(q, 'span', 'form-element align-center', {}, (q) => {
                    $(q, 'label', 'label', {}, "Attachments");
                    $(q, 'div', '', {}, (input) => {
                        $(input, 'span', 'form-element', {}, (q) => {
                            const fileInputLabel = $(q, 'span', 'input placeholder', {}, (q) => {
                                q.innerHTML = 'No file chosen';
                            });
                            const fileInput = $(q, 'input', '', {type: 'file'}, (q) => {
                                q.addEventListener('change', (e) => {
                                    this.handleFileUpload(q as HTMLInputElement, fileInputLabel, input);
                                });
                            });
                            new Button({
                                label: "Choose File",
                                type: ButtonType.PRIMARY,
                                onClick: (e) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    fileInput.click()
                                }
                            }).render(q);
                        });
                    })
                });
            });
        });
    }
}