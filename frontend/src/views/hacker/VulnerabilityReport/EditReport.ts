import { VulnerabilityReportFormView } from './VulnerabilityReportForm';
import {Quark, QuarkFunction as $} from "@ui_lib/quark";
import {ViewHandler} from "@ui_lib/view";
import {Button, ButtonType} from "@components/button/base";
import {VulnerabilityReport, VulnerabilityReportCache} from "@data/common/cache/vulnerabilityReport.cache";
import {CACHE_STORE} from "@data/cache";
import {router} from "@ui_lib/router";

export class EditReportView extends VulnerabilityReportFormView {
    private readonly reportId: string;
    protected vulnerabilityReportCache: VulnerabilityReportCache;
    private status: string = '';

    constructor(params: { projectId: string; reportId: string }) {
        super(params);
        this.reportId = params.reportId;
        this.vulnerabilityReportCache = CACHE_STORE.getVulnerabilityReport(this.reportId);
    }

    private async loadReportData(): Promise<void> {
        const user = await CACHE_STORE.getUser().get()
        const report = await this.vulnerabilityReportCache.load();
        if (report.hackerId !== user.id) {
            router.navigateTo(`/reports/vulnerability/${this.projectId}/${this.reportId}`);
            return;
        }
        this.status = report.status;
        if (report && (report.status === 'Pending' || report.status === "More Info")) {
            this.formObject = {
                vulnerabilityType: report.vulnerabilityType,
                severity: report.severity,
                reportTitle: report.title,
                description: report.description,
                steps: report.steps.map((step) => ({
                    description: step.description,
                    attachments: step.attachments.map((attachment) => attachment.name),
                    id: step.attachments.map((attachment) => attachment.id)
                })),
                agreement: true // assuming it's true if report exists
            };
        }
    }

    protected async handleSubmit(): Promise<void> {
        const report: VulnerabilityReport = await this.prepareReportData();
        const selectedFiles = this.files.flat();

        try {
            const submittedReport = await this.vulnerabilityReportCache.updateReport(this.reportId, report, selectedFiles);
            console.log('Report submitted successfully:', submittedReport);
            router.navigateTo(`/reports/vulnerability/${submittedReport.projectId}/${submittedReport.reportId}`);
        } catch (error) {
            console.error('Error submitting report:', error);
        }
    }

    async render(q: Quark): Promise<void> {
        await this.loadReportData();

        if(this.status !== 'Pending' && this.status !== 'More Info') {
            $(q, 'div', 'error-message', {}, 'This report is not editable.');
            return;
        }

        await super.render(q);

        this.agreementCheckbox.checked = true;
        this.agreementCheckbox.disabled = true

        this.submitButton = new Button({
            label: 'Update Report',
            type: ButtonType.PRIMARY,
            onClick: async (e: Event) => {
                e.preventDefault();
                await this.handleSubmit();
            }
        });
    }
}


export const editReportViewHandler = new ViewHandler(
    '/edit-report/{projectId}/{reportId}',
    EditReportView
);