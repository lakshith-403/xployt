import {Quark, QuarkFunction as $} from '../../../ui_lib/quark';
import {View, ViewHandler} from '../../../ui_lib/view';
import './VulnerabilityReport.scss';
import {HackerProjectInfo, HackerProjectInfoCacheMock} from '../../../data/hacker/cache/hacker.projectInfo';
import {CACHE_STORE} from '../../../data/cache';
import {Button, ButtonType} from "../../../components/button/base";
import {IconButton} from "../../../components/button/icon.button";

class VulnReportView implements View {
    params: { projectId: string };
    projectCache: HackerProjectInfoCacheMock;
    ProjectInformation: HackerProjectInfo | {} = {};
    stepCount = 2
    formObject: {
        vulnerabilityType: string,
        severity: string,
        reportTitle: string,
        description: string,
        steps: {
            description: string,
            attachments: string
        }[]
        agreement: boolean,
    };
    submitButton: Button;

    constructor(params: { projectId: string }) {
        this.params = params;
        this.projectCache = CACHE_STORE.getHackerProjectInfo(this.params.projectId);
        this.formObject = {
            vulnerabilityType: '',
            severity: '',
            reportTitle: '',
            description: '',
            steps: [],
            agreement: false
        };
        this.submitButton = new Button({
            label: 'Submit Report',
            type: ButtonType.PRIMARY,
            onClick: (e: Event) => {
                e.preventDefault()
                this.handleSubmit()
            }
        });
        console.log('params: ', params);
    }

    async loadProjectData(): Promise<void> {
        try {
            this.ProjectInformation = await this.projectCache.get(
                false,
                this.params.projectId
            ) as HackerProjectInfo;
        } catch (error) {
            console.error('Failed to load project data:', error);
        }
    }

    private handleFileUpload(stepNumber: number, fileInputElement: HTMLInputElement, placeholderElement: HTMLElement): void {
        const file = fileInputElement.files?.[0];

        if (file) {
            this.formObject.steps[stepNumber - 1].attachments = file.name;

            placeholderElement.innerHTML = file.name;
            placeholderElement.classList.remove('placeholder');

            console.log(`File uploaded for Step ${stepNumber}:`, this.formObject.steps[stepNumber - 1].attachments);
        } else {
            console.log(`No file selected for Step ${stepNumber}`);
        }
    }


    private addStep(container: Quark): void {
        this.stepCount++;
        this.renderStep(container, this.stepCount);
    }

    private renderStep(container: Quark, i: number): void {
        this.formObject.steps.push({
            description: '',
            attachments: ''
        });
        $(container, 'div', 'step', {}, (q) => {
            $(q, 'span', 'step-number', {}, (q) => {
                q.innerHTML = `Step 0${i}`;
            });
            $(q, 'div', 'step-content', {}, (q) => {
                $(q, 'span', 'form-element align-top', {}, (q) => {
                    $(q, 'label', 'label', {}, (q) => {
                        q.innerHTML = 'Description';
                    });
                    $(q, 'textarea', 'input description', {}, (q) => {
                        q.addEventListener('input', (e) => {
                            this.formObject.steps[i - 1].description = (e.target as HTMLTextAreaElement).value;
                        });
                    });
                });
                $(q, 'span', 'form-element align-center', {}, (q) => {
                    $(q, 'label', 'label', {}, (q) => {
                        q.innerHTML = 'Attachments';
                    });
                    const fileInput = $(q, 'input', '', {type: 'file'}, (q) => {
                        q.addEventListener('change', (e) => {
                            this.handleFileUpload(i, q as HTMLInputElement, fileInputLabel);
                        });
                    });
                    const fileInputLabel = $(q, 'span', 'input placeholder', {}, (q) => {
                        q.innerHTML = 'No file Chosen';
                    });

                    new Button({
                        label: "Choose File",
                        type: ButtonType.PRIMARY,
                        onClick: (e: Event) => {
                            e.preventDefault();
                            fileInput.click();
                        }
                    }).render(q);
                });
            });
        });
    }

    async render(q: Quark): Promise<void> {
        const waiting = $(q, 'div', 'loading-screen', {}, (q) => {
            $(q, 'div', 'spinner', {}, (q) => {
            });
        });
        await this.loadProjectData();
        console.log(this.ProjectInformation);
        waiting.innerHTML = '';
        waiting.remove();

        $(q, 'div', 'vulnerability-report hacker', {}, (q) => {
            $(q, 'h2', 'section-subtitle', {}, (q) => {
                q.innerHTML = `#${this.params.projectId} ${(this.ProjectInformation as HackerProjectInfo).title}`;
            });
            $(q, 'h1', 'section-title', {}, (q) => {
                q.innerHTML = 'Vulnerability Report';
            });
            $(q, 'form', '', {}, (q) => {
                $(q, 'div', 'form-section section-divider', {}, (q) => {
                    // Initial form elements
                    $(q, 'div', 'row', {}, (q) => {
                        $(q, 'span', 'form-element flex-1', {}, (q) => {
                            $(q, 'label', 'label', {}, (q) => {
                                q.innerHTML = 'Vulnerability Type';
                            });
                            $(q, 'select', 'input', {}, (q) => {
                                $(q, 'option', '', {value: 'XSS'}, (q) => {
                                    q.innerHTML = 'XSS';
                                });
                                $(q, 'option', '', {value: 'CSRF'}, (q) => {
                                    q.innerHTML = 'CSRF';
                                });
                                $(q, 'option', '', {value: 'SQLi'}, (q) => {
                                    q.innerHTML = 'SQLi';
                                });
                                q.addEventListener('change', (e) => {
                                    this.formObject.vulnerabilityType = (e.target as HTMLSelectElement).value;
                                });
                            });
                        });
                        $(q, 'span', 'form-element flex-1', {}, (q) => {
                            $(q, 'label', 'label', {}, (q) => {
                                q.innerHTML = 'Severity';
                            });
                            $(q, 'select', 'input', {}, (q) => {
                                $(q, 'option', '', {value: 'Low'}, (q) => {
                                    q.innerHTML = 'Low';
                                });
                                $(q, 'option', '', {value: 'Medium'}, (q) => {
                                    q.innerHTML = 'Medium';
                                });
                                $(q, 'option', '', {value: 'High'}, (q) => {
                                    q.innerHTML = 'High';
                                });
                                q.addEventListener('change', (e) => {
                                    this.formObject.severity = (e.target as HTMLSelectElement).value;
                                });
                            });
                        });
                    });
                    $(q, 'div', 'row', {}, (q) => {
                        $(q, 'span', 'form-element align-center', {}, (q) => {
                            $(q, 'label', 'label', {}, (q) => {
                                q.innerHTML = 'Report Title';
                            });
                            $(q, 'input', 'input', {}, (q) => {
                                q.addEventListener('input', (e) => {
                                    this.formObject.reportTitle = (e.target as HTMLInputElement).value;
                                });
                            });
                        });
                    });
                    $(q, 'div', 'row', {}, (q) => {
                        $(q, 'span', 'form-element', {}, (q) => {
                            $(q, 'label', 'label', {}, (q) => {
                                q.innerHTML = 'Description';
                            });
                            $(q, 'textarea', 'input description', {}, (q) => {
                                q.addEventListener('input', (e) => {
                                    this.formObject.description = (e.target as HTMLTextAreaElement).value;
                                });
                            });
                        });
                    });
                });

                $(q, 'div', 'form-section section-divider', {}, (q) => {
                    $(q, 'h2', 'section-subtitle', {}, (q) => {
                        q.innerHTML = 'Proof of Concept';
                    });
                    const stepsContainer = $(q, 'div', 'step-container', {}, (q) => {

                        for (let i = 1; i <= this.stepCount; i++) {
                            this.renderStep(q, i);
                        }
                    });

                    new IconButton({
                        icon: 'fa fa-plus',
                        label: 'Add Step',
                        type: ButtonType.SECONDARY,
                        onClick: (event: Event) => {
                            event.preventDefault()
                            this.addStep(stepsContainer)
                        }
                    }).render(q)
                })

                $(q, 'div', 'form-section', {}, (q) => {
                    $(q, 'div', 'row', {}, (q) => {
                        $(q, 'input', '', {type: 'checkbox', id: 'agreement'});
                        $(q, 'label', '', {for: 'agreement'}, (q) => {
                            q.innerHTML = 'I certify that Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex';
                        });
                    });
                    $(q, 'div', 'submit', {}, (q) => {
                        this.submitButton.render(q);
                        this.submitButton.disabled = !this.formObject.agreement;
                    })
                });
            });
        });
    }

    private handleSubmit(): void {
        console.log('Form Submitted', this.formObject);
    }
}

export const vulnReportViewHandler = new ViewHandler(
    'report/{projectId}',
    VulnReportView
);

