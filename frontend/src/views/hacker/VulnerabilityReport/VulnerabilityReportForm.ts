import { Quark, QuarkFunction as $ } from '@ui_lib/quark';
import { View, ViewHandler } from '@ui_lib/view';
import './VulnerabilityReport.scss';
import {HackerProjects} from '@data/hacker/cache/hacker.projects';
import {CACHE_STORE} from '@data/cache';
import {Button, ButtonType} from "@components/button/base";
import {BasicInfoSection} from './components/basicInfo';
import {ProofOfConceptSection} from './components/proofOfConcept';
import {Project, ProjectCache} from "@data/common/cache/project.cache";
import {validateField} from "@components/multistepForm/validationUtils";
import {
    ReportAttachment,
    VulnerabilityReport,
    VulnerabilityReportCache
} from "@data/common/cache/vulnerabilityReport.cache";
import {router} from "@ui_lib/router";
import {User} from "@data/user";

export interface formObject {
    vulnerabilityType: string;
    severity: string;
    reportTitle: string;
    description: string;
    steps: {
        id?: string[];
        description: string;
        attachments: string[];
    }[];
    agreement: boolean;
}

export interface validation {
  result: boolean;
  message: string;
}

export class FieldErrorMessage {
  private message: string;
  private validation = true;

  constructor(message: string) {
    this.message = message;
  }

  render(q: Quark): void {
    this.message && $(q, 'div', 'error-message', {}, this.message.replace(/[^a-zA-Z0-9 ]/g, ''));
  }
}

export function handleInputChange(event: Event, formObject: any, formObjectKey: string, validationType: string, inputContainer: HTMLElement): void {
  const value = (event.target as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement).value;
  const validation = validateField(formObjectKey, value, validationType);

  if (validation.result) {
    formObject[formObjectKey] = value;
    console.log('Valid input:', formObject[formObjectKey]);
    const error = inputContainer.querySelector('.error-message');
    if (error) {
      error.remove();
    }
  } else {
    if (!inputContainer.querySelector('.error-message')) {
      new FieldErrorMessage(validation.message).render(inputContainer);
    }
  }
}

export class VulnerabilityReportFormView extends View {
    protected projectId: string;
    protected vulnerabilityReportCache: VulnerabilityReportCache;
    protected projectCache: ProjectCache;
    protected ProjectInformation: Project | {} = {};
    protected severityLevels: Array<string[]> = [];
    protected formObject: formObject;
    protected files: File[][] = [];
    protected submitButton = new Button({
        label: 'Update Report',
        type: ButtonType.PRIMARY,
        onClick: async (e: Event) => {
            e.preventDefault();
            await this.handleSubmit();
        }
    });
    private user!: User

    constructor(params: { projectId: string }) {
        super(params);
        this.projectId = params.projectId;
        this.projectCache = CACHE_STORE.getProject(this.projectId);
        this.vulnerabilityReportCache = CACHE_STORE.getVulnerabilityReport('');

        this.formObject = {
            vulnerabilityType: "",
            severity: "Low",
            reportTitle: "",
            description: "",
            steps: [],
            agreement: false
        };
    }

    protected async loadProjectData(): Promise<void> {
        try {
            this.ProjectInformation = await this.projectCache.load() as Project;
            this.severityLevels = await this.projectCache.getProjectSeverityLevels(this.projectId);
            this.user = await CACHE_STORE.getUser().get();
        } catch (error) {
            console.error('Failed to load project data:', error);
        }
    }

    protected async prepareReportData():  Promise<VulnerabilityReport> {
        const user = await CACHE_STORE.getUser().get();

        const attachments: ReportAttachment[][] = this.files.map((fileArray) =>
            fileArray.map((file) => {
                const id = crypto.randomUUID();
                return {
                    id,
                    name: file.name,
                    url: `${id}.${file.name.split('.').pop()}`
                };
            })
        );

        return {
            projectId: this.projectId,
            hackerId: user.id,
            status: 'Pending',
            severity: this.formObject.severity,
            vulnerabilityType: this.formObject.vulnerabilityType,
            title: this.formObject.reportTitle,
            description: this.formObject.description,
            steps: this.formObject.steps.map((step, index) => ({
                stepNumber: String(index + 1).padStart(2, '0'),
                description: step.description,
                attachments: attachments[index] || []
            })),
            createdAt: new Date().toISOString()
        };
    }

    protected async handleSubmit(): Promise<void> {
        const report: VulnerabilityReport = await this.prepareReportData();
        const selectedFiles = this.files.flat();

        try {
            const submittedReport = await this.vulnerabilityReportCache.createReport(report, selectedFiles);
            console.log('Report submitted successfully:', submittedReport);
            router.navigateTo(`/reports/vulnerability/${submittedReport.projectId}/${submittedReport.reportId}`);
        } catch (error) {
            console.error('Error submitting report:', error);
        }
    }

  async render(q: Quark): Promise<void> {
    const waiting = $(q, 'div', 'loading-screen', {}, (q) => {
      $(q, 'div', 'spinner', {});
    });

    await this.loadProjectData();
    waiting.innerHTML = '';
    waiting.remove();

    if (this.user.type !== 'Hacker') {
        $(q, 'div', 'error-message', {}, 'You are not authorized to create a report.');
        return;
    }

    $(q, 'div', 'vulnerability-report hacker', {}, (q) => {
      $(q, 'h2', 'section-subtitle', {}, `#${this.projectId} ${(this.ProjectInformation as HackerProjects).title}`);
      $(q, 'h1', 'section-title', {}, 'Vulnerability Report');
      $(q, 'form', '', {}, (q) => {
        new BasicInfoSection(this.formObject, this.severityLevels).render(q);
        new ProofOfConceptSection(this.formObject, this.files).render(q);
        this.submitButton.render(q);
      });
    });
  }

  protected shouldRenderBreadcrumbs(): boolean {
    return true;
  }

  protected setupBreadcrumbs(params: { projectId: string; reportId: string }): void {
    this.breadcrumbs?.clearBreadcrumbs();
    this.breadcrumbs?.addBreadcrumb({
      label: `Projects`,
      link: `/projects`,
    });
    this.breadcrumbs?.addBreadcrumb({
      label: `Project #${params.projectId}`,
      link: `/projects/${params.projectId}`,
    });
    this.breadcrumbs?.addBreadcrumb({
      label: `Create Report`,
      link: `/hacker/new-report/${params.projectId}`,
    });
  }
}

export const vulnReportViewHandler = new ViewHandler(
    '/new-report/{projectId}',
    VulnerabilityReportFormView
);
