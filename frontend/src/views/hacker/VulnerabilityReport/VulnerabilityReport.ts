import {Quark, QuarkFunction as $} from '@ui_lib/quark';
import {View, ViewHandler} from '@ui_lib/view';
import './VulnerabilityReport.scss';
import {HackerProjects, HackerProjectInfoCacheMock} from '@data/hacker/cache/hacker.projects';
import {CACHE_STORE} from '@data/cache';
import {Button, ButtonType} from "@components/button/base";
import { BasicInfoSection } from './components/basicInfo';
import { ProofOfConceptSection } from './components/proofOfConcept';

export class VulnReportView extends View {
    params: { projectId: string };
    private projectCache: HackerProjectInfoCacheMock;
    private ProjectInformation: HackerProjects | {} = {};
    private readonly formObject: {
        vulnerabilityType: string;
        severity: string;
        reportTitle: string;
        description: string;
        steps: {
            description: string;
            attachments: string;
        }[];
        agreement: boolean;
    };
    private submitButton: Button;

    constructor(params: { projectId: string }) {
        super();
        this.params = params;
        this.projectCache = CACHE_STORE.getHackerProjectInfo(this.params.projectId);
        this.formObject = {
            vulnerabilityType: '',
            severity: '',
            reportTitle: '',
            description: '',
            steps: [],
            agreement: false
        };
        this.submitButton = new Button({
            label: 'Submit Report',
            type: ButtonType.PRIMARY,
            onClick: (e: Event) => {
                e.preventDefault();
                this.handleSubmit();
            }
        });
        console.log('params: ', params);
    }

    async loadProjectData(): Promise<void> {
        try {
            this.ProjectInformation = await this.projectCache.get(false, this.params.projectId) as HackerProjects;
        } catch (error) {
            console.error('Failed to load project data:', error);
        }
    }

    private handleSubmit(): void {
        console.log('Form Submitted', this.formObject);
    }

    async render(q: Quark): Promise<void> {
        const waiting = $(q, 'div', 'loading-screen', {}, (q) => {
            $(q, 'div', 'spinner', {});
        });

        await this.loadProjectData();
        waiting.innerHTML = '';
        waiting.remove();

        $(q, 'div', 'vulnerability-report hacker', {}, (q) => {
            $(q, 'h2', 'section-subtitle', {}, (q) => {
                q.innerHTML = `#${this.params.projectId} ${(this.ProjectInformation as HackerProjects).title}`;
            });
            $(q, 'h1', 'section-title', {}, (q) => {
                q.innerHTML = "Vulnerability Report";
            });
            $(q, 'form', '', {}, (q) => {
                new BasicInfoSection(this.formObject).render(q);
                new ProofOfConceptSection(this.formObject).render(q);
            });
        });
    }
}

export const vulnReportViewHandler = new ViewHandler(
    '/new-report',
    VulnReportView
);
