import {Quark, QuarkFunction as $} from '@ui_lib/quark';
import {Button, ButtonType} from "@components/button/base";
import {
    FieldErrorMessage,
    formObject,
    handleInputChange
} from "@views/hacker/VulnerabilityReport/VulnerabilityReportForm";
import {validateField} from '@/components/multistepForm/validationUtils';
import NETWORK from "@data/network/network";

export class StepComponent {
    private formObject: formObject;
    private files: File[][];
    private stepNumber: number;
    private parentFileContainer!: HTMLElement;
    private uploadedFilesContainer!: HTMLElement;
    private fileInputLabel!: HTMLElement;

    constructor(formObject: formObject, files: File[][], stepNumber: number) {
        this.formObject = formObject;
        this.files = files;
        this.stepNumber = stepNumber;
    }

    private renderParentAttachments(): void {
        if (!this.parentFileContainer) return;
        this.parentFileContainer.innerHTML = '';

        this.formObject.steps[this.stepNumber - 1].attachments.forEach((attachmentName, index) => {
            const url = `${NETWORK.baseURL}/uploads/${this.formObject.steps[this.stepNumber - 1].id?.[index] ?? ''}`;
            this.createAttachmentTag(attachmentName, url, true, this.parentFileContainer);
        });
    }

    private renderUploadedFiles(): void {
        if (!this.uploadedFilesContainer) return;
        this.uploadedFilesContainer.innerHTML = '';

        this.files[this.stepNumber - 1]?.forEach((file) => {
            this.createAttachmentTag(file.name, URL.createObjectURL(file), false, this.uploadedFilesContainer);
        });
    }

    private renderAttachments(): void {
        this.renderParentAttachments();
        this.renderUploadedFiles();
    }

    private createAttachmentTag(name: string, url: string, isParentAttachment: boolean, container: Quark): void {
        const attachmentTag = $(container, 'span', 'attachment-tag', {}, (q) => {
            $(q, 'span', 'icon', {}, (q) => {
                const iconClass = isParentAttachment ? 'fa-solid fa-newspaper' : 'fa-solid fa-file';
                $(q, 'i', iconClass, {});
            });
            $(q, 'span', 'name', {}, name);
        });

        if (!isParentAttachment) {
            this.addDeleteIcon(attachmentTag, name);
        }

        attachmentTag.addEventListener('click', () => {
            window.open(url, '_blank');
        });
    }

    private addDeleteIcon(attachmentTag: HTMLElement, name: string): void {
        const deleteIcon = $(attachmentTag, 'span', 'delete', {}, (q) => {
            $(q, 'i', 'fa-solid fa-trash', {});
        });

        deleteIcon.addEventListener('click', (e) => {
            e.stopPropagation();
            this.files[this.stepNumber - 1] = this.files[this.stepNumber - 1].filter((f: File) => f.name !== name);
            this.renderUploadedFiles();
        });
    }

    private addFiles(stepFiles: FileList): void {
        const fileNames = Array.from(stepFiles).map(file => file.name);
        this.formObject.steps[this.stepNumber - 1].attachments.push(...fileNames);
        this.files[this.stepNumber - 1] = Array.from(stepFiles);
    }

    private handleFileUploads(fileInput: HTMLInputElement, fileInputLabel: HTMLElement, parent: HTMLElement): void {
        const stepFiles = fileInput.files;
        if (!stepFiles) return;

        const invalidFile = Array.from(stepFiles).find(file => {
            const validation = validateField('file', file.name, 'file');
            if (!validation.result) {
                new FieldErrorMessage(validation.message).render(parent);
                return true;
            }
            return false;
        });

        if (invalidFile) return;

        this.addFiles(stepFiles);
        this.clearError(fileInputLabel, parent);
        this.renderUploadedFiles();
    }

    private clearError(fileInputLabel: HTMLElement, parent: HTMLElement): void {
        const error = parent.querySelector('.error-message');
        fileInputLabel.classList.remove('error');
        if (error) error.remove();
    }

    private renderDescriptionInput(container: Quark): void {
        $(container, 'span', 'form-element align-top', {}, (q) => {
            $(q, 'label', 'label', {}, "Description");
            const description: HTMLInputElement = $(q, 'textarea', 'input description', {}) as HTMLInputElement;
            description.value = this.formObject.steps[this.stepNumber - 1].description;
            description.addEventListener('blur', (e) => {
                handleInputChange(e, this.formObject.steps[this.stepNumber - 1], 'description', 'string', description.parentElement!);
            });
        });
    }

    private renderFileInput(container: Quark): void {
        $(container, 'span', 'form-element align-center', {}, (q) => {
            $(q, 'label', 'label', {}, "Attachments");
            this.fileInputLabel = $(q, 'span', 'input file-labels', {placeholder: "No file chosen"});
            const fileInput = $(q, 'input', '', {type: 'file'}, (input) => {
                input.addEventListener('change', () => {
                    this.handleFileUploads(input as HTMLInputElement, this.fileInputLabel, q);
                });
            });

            this.parentFileContainer = $(this.fileInputLabel, 'div', 'attached-files', {}, (q) => {
            });
            this.uploadedFilesContainer = $(this.fileInputLabel, 'div', 'uploaded-files', {}, (q) => {
            });

            new Button({
                label: "Choose File",
                type: ButtonType.PRIMARY,
                onClick: (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    fileInput.click();
                }
            }).render(q);
        });
    }

    render(q: Quark): void {
        $(q, 'div', 'step', {}, (q) => {
            $(q, 'span', 'step-number', {}, `Step ${String(this.stepNumber).padStart(2, '0')}`);
            $(q, 'div', 'step-content', {}, (q) => {
                this.renderDescriptionInput(q);
                this.renderFileInput(q);
                this.renderAttachments();
            });
        });
    }
}